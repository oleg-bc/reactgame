{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","onClick","e","shuffleArr","alt","name","src","image","occupation","location","Wrapper","children","Title","wasClicked","highScore","currScore","App","state","friends","count","hs","cs","message","removeFriend","id","console","log","_this","filter","friend","setState","reverseArr","reversed","reverse","incrementCount","clickedCard","target","msg","includes","push","shuffled","j","x","i","length","Math","floor","random","shuffleFunc","justTwo","twoArr","newCount","_this2","this","components_Wrapper","components_Title","map","components_FriendCard","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.5248695a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n \n  return (\n    <div className=\"card\"\n\n    >\n      <div className=\"img-container\"\n       \n      //  id={props.name} \n        ////giving the div an ID to pass the name via props\n        onClick={(e) => props.shuffleArr(e)}/// whats goin on w/ e - event were passing?\n      >\n\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n    \n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Occupation:</strong> {props.occupation}\n          </li>\n          <li>\n            <strong>Location:</strong> {props.location}\n          </li>\n        </ul>\n      </div>\n      {/* <span onClick={() => props.removeFriend(props.id)} className=\"remove\">\n        ùòÖ\n      </span> */}\n    </div>\n  );\n}\n//since our event handlers need to be callbacks, we normally\n//can't pass in arguments without invoking them right away. \n//But by wrapping the removeFriend method in an another function, \n//we can pass the id prop into the inner removeFriend method. \n//When the span is clicked, it calls the anonymous callback function, which then calls the removeFriend method with the friend's id as an argument.\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\n///creates a shuffle function to use later\nvar wasClicked = [];\nvar highScore=0;\nvar currScore=0;\nfunction shuffleFunc(a) {  /////question >>> i was not able to declare it before using\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n  return a;\n}\n\n/// 1 get just 2 to work\n/// add a new prop and update it\nclass App extends Component {\n  \n  // Setting this.state.friends to the friends json array\n  //same as friends : friends\n  //when defining object properties with ES6, \n  //if the object's key and value have the same name, \n  //we can omit the colon ‚Äî this is just an optional shorthand syntax.\n  state = {\n    friends,\n    count: 0, /////key val pairs make sure to use : not = \n    // alreadyClicked: false ///PROBABLY DO NOT NEED THIS HERE\n    // friendName: \"No card clicked yet\"\n    hs:0,\n    cs:0,\n    message:'lets play'\n  };\n\n  ///In that case, you would set friends to twoArr, not justTwo\n  ///Because you're mapping through this.state.friends\n\n  removeFriend = id => {\n    console.log(\"now id is     \" + id);\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    //We include only friends with an id property not equal to the id being received into this method. \n    const friends = this.state.friends.filter(friend => friend.id !== id);\n    // Set this.state.friends equal to the new friends array\n    //when we update our component's state by removing one of the friend objects, our component re-renders itself.\n    this.setState({ friends });\n  };\n\n  reverseArr = () => {\n    const reversed = this.state.friends.reverse()///array of objects. were note manipulating state. instead we assign the new state to a const\n    this.setState({\n      friends: reversed  //////here we actually assign the new state into the original state object\n    })\n  }\n\n  //function shuffle(a) {\n  shuffleArr = (e) => {\n    \n    this.incrementCount();\n    var clickedCard = e.target.alt;\n    console.log(e.target.alt);\n    var x = wasClicked.includes(clickedCard);\n    var msg=\"\";\n    if (x){\n      \n      if (currScore > highScore){\n        highScore=currScore;\n        if (currScore<12){msg=\"Keep Going Try Again\";}\n      }\n      wasClicked=[];\n      currScore=0;\n    }else{\n      if (highScore<=currScore){\n        highScore+=1;\n        if (currScore===12){msg=\"YOU WON!!\";}\n      }\n      currScore+=1;\n      wasClicked.push(clickedCard);\n      \n    }\n\n    ////  we console log extract unique identifier of thing being clicked\n\n    console.log(\"all of E is **********\");\n    console.log(e.target);\n    /////FIRST  we check the [ item that was clicked] whether its in the chosen arr\n    ///if noT\n    ////then we push it into the arr -- of chosen items\n    ////then player gets plus more point if more than hi score incr the hi score\n    /// if yes - flip the switch to game lost\n\n    ///separately we track hi score\n\n    const inputArr = this.state.friends\n    const shuffled = shuffleFunc(inputArr)///array of objects. were note manipulating state. instead we assign the new state to a const\n    this.setState({\n      friends: shuffled,  //////here we actually assign the new state into the original state object\n      name: e.target.alt,\n      hs: highScore,\n      cs: currScore,\n      message:msg\n    })\n  }\n  justTwo = () => {\n    const twoArr = []\n    twoArr.push(this.state.friends[0])\n    twoArr.push(this.state.friends[1])\n    this.setState({\n      friends: twoArr\n    })\n  }\n\n  incrementCount = () => {\n    let newCount = this.state.count + 1;\n    this.setState({\n      count: newCount\n    })\n    console.log(this.state.count);\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  //whenever we map over a list of data and return JSX, \n  //React wants us to give each element a unique key prop. React uses this value internally to help it efficiently render \n  //and re-render components from arrays of data.\n\n  //the key prop is unusual because it's used by React but \n  //isn't actually available for us to use inside of the component we pass it to. We pass the friend id in as a separate prop because we'll need it inside of the FriendCard component.\n  render() {\n    return (\n      <Wrapper>\n        <Title><br />Clicky Game Says: {this.state.message} <br />{this.state.name} <br /> Hi Score {this.state.hs}<br /> Current Score {this.state.cs}</Title>\n        {this.state.friends.map((friend, i) => ( ////this map creates each single card\n          <FriendCard\n            // onClick={this.shuffleArr}\n            shuffleArr={this.shuffleArr}///shuffleArr is arbitrary decided after this.<<<\n            removeFriend={this.removeFriend}\n            // alreadyClicked={friend.alreadyClicked}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n            message={this.state.message}\n          />\n        ))}\n        {/* <button onClick={this.reverseArr}>reverse</button>\n        <button onClick={this.justTwo}>just2</button>\n        <button onClick={this.shuffleArr}>shuffle </button> */}\n      </Wrapper>\n    );\n  }\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}